(def nft-shop
  (deploy
   '(do
      (def counter 0)

      ;; Mapping of owner to a set of Listing ID.
      (def selling {})

      ;; Listings indexed by ID.
      (def listing {})

      (defn add-listing [new-listing]
        (let [owner *caller*

              ;; Counter is a simple and good-enough mechanism to manage IDs.
              id counter

              owner-selling (get selling owner #{})
              owner-selling (conj owner-selling id)]

          ;; Update owner's set of Listing IDs to add a new Listing.
          (def selling (assoc selling owner owner-selling))

          ;; Update available Listings (indexed by ID).
          (def listing (assoc listing id (merge new-listing {:id id :owner owner})))

          (def counter (inc counter))

          id))

      (defn remove-listing [id]
        (let [owner *caller*

              owner-selling (get selling owner #{})
              owner-selling (disj owner-selling id)]

          ;; The owner is the only one allowed to remove the Listing.
          (when (not (= *caller* (get-in listing [id :owner])))
            (fail "Not allowed."))

          ;; Update owner's set of Listing IDs to remove an existing Listing.
          (def selling (assoc selling owner owner-selling))

          ;; Update available Listings (indexed by ID).
          (def listing (dissoc listing id))

          nil))

      ;; Returns a list with all Listings.
      (defn shop []
        (mapcat
         (fn [owner+ids]
           (map
            (fn [id]
              (get listing id))
            (last owner+ids)))
         selling))

      ;; Returns a list of Listings of a particular account.
      (defn shop-of [seller]
        (map
         (fn [id]
           (get listing id))
         (get selling seller #{})))

      (export add-listing remove-listing shop shop-of))))