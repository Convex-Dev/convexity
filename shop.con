(def shop
  (deploy
   '(do
      (import convex.asset :as asset)

      (def counter 0)

      ;; Listings indexed by ID.
      (def listings {})

      (defn ^{:callable? true} add-listing [listing]
        (let [owner *caller*

              ;; Counter is a good-enough mechanism to manage IDs.
              id counter]

          ;; Accept offer (caller must offer the Asset first).
          ;; This call will in turn call the `accept` function of the Asset Actor.
          ;; See the Asset library source for more details.
          (asset/accept *caller* (:asset listing))

          ;; Update available Listings (indexed by ID).
          (def listings (assoc listings id (merge listing {:id id :owner owner})))

          (def counter (inc counter))

          id))

      (defn ^{:callable? true} remove-listing [id]
        (let [owner *caller*]

          ;; The owner is the only one allowed to remove the Listing.
          (when (not (= owner (get-in listings [id :owner])))
            (fail "Not allowed."))

          ;; Offer Asset to owner.
          (asset/transfer owner (get-in listings [id :asset]))

          ;; Update available Listings (indexed by ID).
          (def listings (dissoc listings id))

          nil))

      ;; Returns a list with all Listings.
      (defn ^{:callable? true} shop []
        (values listings))

      (defn ^{:callable? true} buy-listing [id]
        (let [listing (get listings id)

              buyer *caller*
              seller (:owner listing)

              ;; Price is in CVX if `price-with` is nil.
              [price price-with] (:price listing)]
          (cond
            price-with
            (do
              (asset/accept buyer [price-with price])
              (asset/transfer seller [price-with price]))

            :else
            (let [accepted (accept *offer*)]
              (if (< accepted price)
                (fail (str accepted " < " price))
                (transfer seller accepted))))

          ;; Transfer Asset to buyer.
          (asset/transfer buyer (:asset listing))

          ;; Remove listing.
          (def listings (dissoc listings id))

          true)))))