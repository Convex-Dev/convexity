(def convexity
  (deploy-once
   '(do
      (import convex.trust :as trust)

      (def trust-monitor
        (deploy (trust/build-whitelist {:controller *caller* :whitelist [*caller*]})))

      (def registry
        {})

      (defn all-assets
        ^{:doc
          {:type :function
           :signature [{:params []}]
           :description "Returns a mapping of Address to metadata."}}
        []
        registry)

      (defn asset-metadata
        ^{:doc
          {:type :function
           :signature [{:params []}]
           :description "Returns metadata for a particular Asset."}}
        [address-or-string]
        (get registry (address address-or-string)))

      (defn register-asset
        ^{:doc
          {:type :function
           :signature [{:params [address metadata]}]
           :description "Registers metadata for a particular Asset. Returns registry.

                         Metadata must have:
                          - name            : string
                          - description     : string
                          - type            : keyword fungible | non-fungible
                          - symbol          : string
                          - decimals        : number"}}
        [address metadata]
        (if (trust/trusted? trust-monitor *caller*)
          (def registry (assoc registry address metadata))
          (fail :unauthorized "You're not authorized to modify the registry.")))

      (defn unregister-asset
        ^{:doc
          {:type :function
           :signature [{:params [address]}]
           :description "Unregisters metadata for a particular Asset."}}
        [address]
        (if (trust/trusted? trust-monitor *caller*)
          (def registry (dissoc registry address))
          (fail :unauthorized "You're not authorized to modify the registry.")))

      (export all-assets asset-metadata register-asset unregister-asset))))
